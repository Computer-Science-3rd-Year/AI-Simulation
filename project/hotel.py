# import simpy
# import matplotlib.pyplot as plt
# import resources as rs

# class Hotel(simpy.Environment):
#     def __init__(self):
#         super().__init__()

#         '''
#         self.rooms--> tupla de 3 elementos: (count_person, price_per_capita, quality (good, regular, bad))
#         idem for attractions and services
#         '''
#         self.rooms = rs.Room(self, num_rooms=10)
#         self.reception = rs.Reception(self)
#         self.attractions = []
#         self.services = []

#         '''
#         self.staff--> array de agentes (Worker_agent)
#         '''
#         self.staff = []
#         #self.tourists = []
#         self.revenue = 0
#         self.tourist_satisfaction = 0
#         self.reputation = 0
#         self.target_revenue = 1000  # Set a target revenue for the hotel

#     def calculate_revenue(self):
#         """
#         Calculates the total revenue generated by the hotel.
#         """
        
#         # Implement the logic to calculate revenue based on room bookings, services, and attractions
#         # For example: revenue = room_price * num_occupied_rooms + service_revenue + attraction_revenue
#         # This is a placeholder for now, you'll need to define how revenue is calculated based on your model.
#         for room in self.rooms:
#             self.revenue += room[0]*room[1]

#         for attraction in self.attractions:
#             self.revenue += attraction[0]*attraction[1]
            
#         for service in self.services:
#             self.revenue += service[0]*service[1]
        
#         for worker in self.staff:
#             self.revenue -= worker.salary # tener en cuenta cada cuánto tiempo se le paga a un trabajador
        
#         return self.revenue

#     def calculate_tourist_satisfaction(self):
#         """
#         Calculates the average satisfaction level of tourists.
#         """
#         # Implement the logic to calculate tourist satisfaction based on their feedback and experience
#         # For example: satisfaction = sum(tourist_ratings) / num_tourists
#         # This is a placeholder for now, you'll need to define how satisfaction is calculated based on your model.

#         #cómo acceder a las propiedades del turista!!!!!!!!!!!!!!!!!!!!**********************************$*#*$*$*$**$*$*$*$*
#         return self.tourist_satisfaction

#     '''
#     Por ahora podemos prescindir de la reputación
#     '''
#     def calculate_reputation(self):
#         """
#         Calculates the reputation of the hotel based on online reviews and feedback.
#         """
#         # Implement the logic to calculate reputation based on online reviews and feedback
#         # For example: reputation = (num_positive_reviews - num_negative_reviews) / total_reviews
#         # This is a placeholder for now, you'll need to define how reputation is calculated based on your model.

#         return self.reputation

#     def add_attraction(self, attraction_name):
#         """
#         Adds a new attraction to the hotel.
#         """
#         self.attractions.append(attraction_name)

#     def hire_staff(self, staff_role):
#         """
#         Hires a new staff member with the specified role.
#         """
#         self.staff.append(staff_role)

#     def improve_services(self):
#         """
#         Improves the quality of services offered by the hotel.
#         """
#         # Implement logic to improve services based on your model. 
#         # This could involve adding new services, upgrading existing ones, or increasing staff for better service delivery.
#         self.services.append("Improved Services") 



# class Tourist(object):
#     def __init__(self, env, nombre, hotel):
#         self.env = env
#         self.nombre = nombre
#         self.hotel = hotel
#         self.action = env.process(self.run())
    
#     def run(self):
#         # El turista llega al hotel 
#         print(f'{self.env.now}: {self.nombre} llega al hotel')
#         # El turista reserva una habitación
#         with self.hotel.habitaciones.request() as req:
#             yield req
#             print(f'{self.env.now}: {self.nombre} se registra en la habitación')
#             yield self.env.timeout(2)  # Tiempo que el turista pasa en la habitación 
#             print(f'{self.env.now}: {self.nombre} sale del hotel') 

#         tiempos_salida.append(self.env.now)  # Guarda el tiempo de salida del turista

# tiempos_salida = []

# # Crea el ambiente de simulación
# env = simpy.Environment()
# hotel = Hotel(env)

# # Crea algunos turistas
# turista1 = Tourist(env, "Juan", hotel)
# turista2 = Tourist(env, "Maria", hotel)


# # Ejecuta la simulación durante 10 horas
# env.run(until=10)

# # Visualización con matplotlib
# plt.hist(tiempos_salida, bins=5, edgecolor='black')
# plt.xlabel('Tiempo de salida')
# plt.ylabel('Número de turistas')
# plt.title('Salida de los turistas del hotel')
# plt.show()