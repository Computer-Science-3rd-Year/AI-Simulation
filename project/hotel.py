import copy
class Hotel:
    def __init__(self, services):
        self.services = {} # {'service_1': availability, 'service_2': availability,..., 'service_n': availability} *service_i existió en el hotel al menos 1 vez
        self.init_services(services)
        self.revenues = {}
        self.init_revenues()
        self.expenses = {} # {'service_1': {'utility_1': expense, 'utility_2: expense',...},  'service_2': {'utility_1': expense, 'utility_2: expense',...}, ...} => 1 dict for each service
        self.init_expenses()
        self.tourist_register = {} # {'tourist_name': (state_when_arrive, state_when_go), ...}
    
    
    def init_services(self, services):
        for service in services:
            self.services[service] = True
    
    def init_revenues(self):
        for serv, _ in self.services:
            self.revenues[serv] = 0
       
    def init_expenses(self):
        for serv, _ in self.services:
            self.expenses[serv] = {}

            for utl in serv.utilities:
                self.expenses[serv][utl] = 0
     
    def add_service(self, new_service):
        if new_service in self.services:
            if self.services[new_service]: return
            self.services[new_service] = True
            return

        self.services[new_service] = True       
        self.revenues[new_service] = 0
        self.expenses[new_service] = {}

        for utility in new_service.utilities:
            self.expenses[utility] = 0

    
    def disable_service(self, old_service):
        if not old_service in self.services:
            print(f'The {old_service.name} service does not exist in the hotel')
            return
        self.services[old_service] = False        
    

class Service:
    def __init__(self, resource, name, necesity, price, utilities):
        self.resource = resource
        self.name = name
        self.necesity = necesity
        self.price = price
        self.utilities = utilities
        self.state = 0 # porcentaje de calidad de todas sus utilidades
    
    def update_state(self):
        for utlty in self.utilities:
            self.state += utlty.quality
        self.state = self.state/len(self.utilities)
    
    def update_price_from_state(self):
        for utlty in self.utilities:
            if utlty.quality < 0.5:
                price -= utlty.quality
            elif utlty.quality > 0.5:
                price += utlty.quality    

    def execute_service(self, agent):
        for key in agent.perception.services.keys():
            if key.name == self.name:
                del agent.perception.services[key]
                break
        
        actually_service = copy.deepcopy(self)
        agent.perception.services[actually_service] = True

        agent.beliefs[self.necesity] += 10

class Utility:
    def __init__(self, name, container=None): # podríamos agregarle partes, por ej: cama tiene colchón, sábanas, almohadas... 
                              # => calidad de la cama = sum(qual(colchon), qual(sabanas), qual(almohadas),...)
        self.name = name
        self.quality = 0.5 # porcentaje de 0 a 1, 1 equiv a 100% lo q equivale a lujo, luego 0.5 es estandar
                           # establecer un cálculo en base a, quizás, la opinión de los turistas, o pagar más dinero por aumentar la calidad 
        self.container = container

    def increment_quality(self):
        pass





# import simpy
# import matplotlib.pyplot as plt
# import resources as rs

# class Hotel(simpy.Environment):
#     def __init__(self):
#         super().__init__()

#         '''
#         self.rooms--> tupla de 3 elementos: (count_person, price_per_capita, quality (good, regular, bad))
#         idem for attractions and services
#         '''
#         self.rooms = rs.Room(self, num_rooms=10)
#         self.reception = rs.Reception(self)
#         self.attractions = []
#         self.services = []

#         '''
#         self.staff--> array de agentes (Worker_agent)
#         '''
#         self.staff = []
#         #self.tourists = []
#         self.revenue = 0
#         self.tourist_satisfaction = 0
#         self.reputation = 0
#         self.target_revenue = 1000  # Set a target revenue for the hotel

#     def calculate_revenue(self):
#         """
#         Calculates the total revenue generated by the hotel.
#         """
        
#         # Implement the logic to calculate revenue based on room bookings, services, and attractions
#         # For example: revenue = room_price * num_occupied_rooms + service_revenue + attraction_revenue
#         # This is a placeholder for now, you'll need to define how revenue is calculated based on your model.
#         for room in self.rooms:
#             self.revenue += room[0]*room[1]

#         for attraction in self.attractions:
#             self.revenue += attraction[0]*attraction[1]
            
#         for service in self.services:
#             self.revenue += service[0]*service[1]
        
#         for worker in self.staff:
#             self.revenue -= worker.salary # tener en cuenta cada cuánto tiempo se le paga a un trabajador
        
#         return self.revenue

#     def calculate_tourist_satisfaction(self):
#         """
#         Calculates the average satisfaction level of tourists.
#         """
#         # Implement the logic to calculate tourist satisfaction based on their feedback and experience
#         # For example: satisfaction = sum(tourist_ratings) / num_tourists
#         # This is a placeholder for now, you'll need to define how satisfaction is calculated based on your model.

#         #cómo acceder a las propiedades del turista!!!!!!!!!!!!!!!!!!!!**********************************$*#*$*$*$**$*$*$*$*
#         return self.tourist_satisfaction

#     '''
#     Por ahora podemos prescindir de la reputación
#     '''
#     def calculate_reputation(self):
#         """
#         Calculates the reputation of the hotel based on online reviews and feedback.
#         """
#         # Implement the logic to calculate reputation based on online reviews and feedback
#         # For example: reputation = (num_positive_reviews - num_negative_reviews) / total_reviews
#         # This is a placeholder for now, you'll need to define how reputation is calculated based on your model.

#         return self.reputation

#     def add_attraction(self, attraction_name):
#         """
#         Adds a new attraction to the hotel.
#         """
#         self.attractions.append(attraction_name)

#     def hire_staff(self, staff_role):
#         """
#         Hires a new staff member with the specified role.
#         """
#         self.staff.append(staff_role)

#     def improve_services(self):
#         """
#         Improves the quality of services offered by the hotel.
#         """
#         # Implement logic to improve services based on your model. 
#         # This could involve adding new services, upgrading existing ones, or increasing staff for better service delivery.
#         self.services.append("Improved Services") 



# class Tourist(object):
#     def __init__(self, env, nombre, hotel):
#         self.env = env
#         self.nombre = nombre
#         self.hotel = hotel
#         self.action = env.process(self.run())
    
#     def run(self):
#         # El turista llega al hotel 
#         print(f'{self.env.now}: {self.nombre} llega al hotel')
#         # El turista reserva una habitación
#         with self.hotel.habitaciones.request() as req:
#             yield req
#             print(f'{self.env.now}: {self.nombre} se registra en la habitación')
#             yield self.env.timeout(2)  # Tiempo que el turista pasa en la habitación 
#             print(f'{self.env.now}: {self.nombre} sale del hotel') 

#         tiempos_salida.append(self.env.now)  # Guarda el tiempo de salida del turista

# tiempos_salida = []

# # Crea el ambiente de simulación
# env = simpy.Environment()
# hotel = Hotel(env)

# # Crea algunos turistas
# turista1 = Tourist(env, "Juan", hotel)
# turista2 = Tourist(env, "Maria", hotel)


# # Ejecuta la simulación durante 10 horas
# env.run(until=10)

# # Visualización con matplotlib
# plt.hist(tiempos_salida, bins=5, edgecolor='black')
# plt.xlabel('Tiempo de salida')
# plt.ylabel('Número de turistas')
# plt.title('Salida de los turistas del hotel')
# plt.show()